
IMU_v_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005ce  00000662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800106  00800106  00000668  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000eab  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013cf  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000078b  00000000  00000000  000023d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000db0  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000274  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004d1  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a13  00000000  00000000  00004059  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	6e c1       	rjmp	.+732    	; 0x30e <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a6 e0       	ldi	r26, 0x06	; 6
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	aa 31       	cpi	r26, 0x1A	; 26
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ee ec       	ldi	r30, 0xCE	; 206
  b8:	f5 e0       	ldi	r31, 0x05	; 5
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
  ca:	02 d0       	rcall	.+4      	; 0xd0 <main>
  cc:	7e c2       	rjmp	.+1276   	; 0x5ca <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <main>:
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ed d1       	rcall	.+986    	; 0x4b0 <usart_init>
  d6:	c4 d1       	rcall	.+904    	; 0x460 <init_ADC>
  d8:	da d1       	rcall	.+948    	; 0x48e <init_timer>
  da:	14 d2       	rcall	.+1064   	; 0x504 <spiInit>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x12>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x1c>
  ec:	00 00       	nop
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e2       	ldi	r25, 0x20	; 32
  fa:	13 d2       	rcall	.+1062   	; 0x522 <spiTransferAll>
  fc:	60 93 11 01 	sts	0x0111, r22
 100:	70 93 12 01 	sts	0x0112, r23
 104:	80 93 13 01 	sts	0x0113, r24
 108:	90 93 14 01 	sts	0x0114, r25
 10c:	2f e7       	ldi	r18, 0x7F	; 127
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x42>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x4c>
 11c:	00 00       	nop
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e2       	ldi	r25, 0x20	; 32
 12a:	fb d1       	rcall	.+1014   	; 0x522 <spiTransferAll>
 12c:	60 93 11 01 	sts	0x0111, r22
 130:	70 93 12 01 	sts	0x0112, r23
 134:	80 93 13 01 	sts	0x0113, r24
 138:	90 93 14 01 	sts	0x0114, r25
 13c:	2f e7       	ldi	r18, 0x7F	; 127
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x72>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x7c>
 14c:	00 00       	nop
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e2       	ldi	r25, 0x20	; 32
 15a:	e3 d1       	rcall	.+966    	; 0x522 <spiTransferAll>
 15c:	60 93 11 01 	sts	0x0111, r22
 160:	70 93 12 01 	sts	0x0112, r23
 164:	80 93 13 01 	sts	0x0113, r24
 168:	90 93 14 01 	sts	0x0114, r25
 16c:	87 ec       	ldi	r24, 0xC7	; 199
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0xa0>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0xa6>
 176:	00 00       	nop
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e2       	ldi	r25, 0x20	; 32
 184:	ce d1       	rcall	.+924    	; 0x522 <spiTransferAll>
 186:	60 93 11 01 	sts	0x0111, r22
 18a:	70 93 12 01 	sts	0x0112, r23
 18e:	80 93 13 01 	sts	0x0113, r24
 192:	90 93 14 01 	sts	0x0114, r25
 196:	87 ec       	ldi	r24, 0xC7	; 199
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0xca>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0xd0>
 1a0:	00 00       	nop
 1a2:	42 e0       	ldi	r20, 0x02	; 2
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e2       	ldi	r25, 0x20	; 32
 1ae:	b9 d1       	rcall	.+882    	; 0x522 <spiTransferAll>
 1b0:	60 93 09 01 	sts	0x0109, r22
 1b4:	70 93 0a 01 	sts	0x010A, r23
 1b8:	80 93 0b 01 	sts	0x010B, r24
 1bc:	90 93 0c 01 	sts	0x010C, r25
 1c0:	9f e7       	ldi	r25, 0x7F	; 127
 1c2:	28 e3       	ldi	r18, 0x38	; 56
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	91 50       	subi	r25, 0x01	; 1
 1c8:	20 40       	sbci	r18, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0xf6>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x100>
 1d0:	00 00       	nop
 1d2:	42 e0       	ldi	r20, 0x02	; 2
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e2       	ldi	r25, 0x20	; 32
 1de:	a1 d1       	rcall	.+834    	; 0x522 <spiTransferAll>
 1e0:	60 93 09 01 	sts	0x0109, r22
 1e4:	70 93 0a 01 	sts	0x010A, r23
 1e8:	80 93 0b 01 	sts	0x010B, r24
 1ec:	90 93 0c 01 	sts	0x010C, r25
 1f0:	9f e7       	ldi	r25, 0x7F	; 127
 1f2:	28 e3       	ldi	r18, 0x38	; 56
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	91 50       	subi	r25, 0x01	; 1
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x126>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x130>
 200:	00 00       	nop
 202:	42 e0       	ldi	r20, 0x02	; 2
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e2       	ldi	r25, 0x20	; 32
 20e:	89 d1       	rcall	.+786    	; 0x522 <spiTransferAll>
 210:	60 93 09 01 	sts	0x0109, r22
 214:	70 93 0a 01 	sts	0x010A, r23
 218:	80 93 0b 01 	sts	0x010B, r24
 21c:	90 93 0c 01 	sts	0x010C, r25
 220:	87 ec       	ldi	r24, 0xC7	; 199
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x154>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x15a>
 22a:	00 00       	nop
 22c:	42 e0       	ldi	r20, 0x02	; 2
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e2       	ldi	r25, 0x20	; 32
 238:	74 d1       	rcall	.+744    	; 0x522 <spiTransferAll>
 23a:	60 93 09 01 	sts	0x0109, r22
 23e:	70 93 0a 01 	sts	0x010A, r23
 242:	80 93 0b 01 	sts	0x010B, r24
 246:	90 93 0c 01 	sts	0x010C, r25
 24a:	87 ec       	ldi	r24, 0xC7	; 199
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <main+0x17e>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x184>
 254:	00 00       	nop
 256:	43 e0       	ldi	r20, 0x03	; 3
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	63 e0       	ldi	r22, 0x03	; 3
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e2       	ldi	r25, 0x20	; 32
 262:	5f d1       	rcall	.+702    	; 0x522 <spiTransferAll>
 264:	60 93 16 01 	sts	0x0116, r22
 268:	70 93 17 01 	sts	0x0117, r23
 26c:	80 93 18 01 	sts	0x0118, r24
 270:	90 93 19 01 	sts	0x0119, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	9f e7       	ldi	r25, 0x7F	; 127
 276:	28 e3       	ldi	r18, 0x38	; 56
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	91 50       	subi	r25, 0x01	; 1
 27c:	20 40       	sbci	r18, 0x00	; 0
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x1aa>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x1b4>
 284:	00 00       	nop
	_delay_ms(0.1);
	
	gyroY = spiTransferAll(0x20000003,3);
	_delay_ms(50);

	gyroY = spiTransferAll(0x20000000,3);
 286:	43 e0       	ldi	r20, 0x03	; 3
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e2       	ldi	r25, 0x20	; 32
 292:	47 d1       	rcall	.+654    	; 0x522 <spiTransferAll>
 294:	60 93 16 01 	sts	0x0116, r22
 298:	70 93 17 01 	sts	0x0117, r23
 29c:	80 93 18 01 	sts	0x0118, r24
 2a0:	90 93 19 01 	sts	0x0119, r25
 2a4:	9f e7       	ldi	r25, 0x7F	; 127
 2a6:	28 e3       	ldi	r18, 0x38	; 56
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	91 50       	subi	r25, 0x01	; 1
 2ac:	20 40       	sbci	r18, 0x00	; 0
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x1da>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x1e4>
 2b4:	00 00       	nop
	_delay_ms(50);

	gyroY = spiTransferAll(0x20000000,3);	
 2b6:	43 e0       	ldi	r20, 0x03	; 3
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e2       	ldi	r25, 0x20	; 32
 2c2:	2f d1       	rcall	.+606    	; 0x522 <spiTransferAll>
 2c4:	60 93 16 01 	sts	0x0116, r22
 2c8:	70 93 17 01 	sts	0x0117, r23
 2cc:	80 93 18 01 	sts	0x0118, r24
 2d0:	90 93 19 01 	sts	0x0119, r25
 2d4:	87 ec       	ldi	r24, 0xC7	; 199
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x208>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x20e>
 2de:	00 00       	nop
	_delay_ms(0.1);

	gyroY = spiTransferAll(0x20000000,3);
 2e0:	43 e0       	ldi	r20, 0x03	; 3
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e2       	ldi	r25, 0x20	; 32
 2ec:	1a d1       	rcall	.+564    	; 0x522 <spiTransferAll>
 2ee:	60 93 16 01 	sts	0x0116, r22
 2f2:	70 93 17 01 	sts	0x0117, r23
 2f6:	80 93 18 01 	sts	0x0118, r24
 2fa:	90 93 19 01 	sts	0x0119, r25
 2fe:	87 ec       	ldi	r24, 0xC7	; 199
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <main+0x232>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x238>
 308:	00 00       	nop
	_delay_ms(0.1);
	
	sei();
 30a:	78 94       	sei
 30c:	ff cf       	rjmp	.-2      	; 0x30c <main+0x23c>

0000030e <__vector_12>:
	}
}

/* The coordinates are defined in the documentation.*/

ISR(TIMER1_COMPA_vect){
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	0b b6       	in	r0, 0x3b	; 59
 31a:	0f 92       	push	r0
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	usart_send(0x00);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	c7 d0       	rcall	.+398    	; 0x4c6 <usart_send>
	usart_send(0x00);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	c5 d0       	rcall	.+394    	; 0x4c6 <usart_send>
	usart_send(0x00);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	c3 d0       	rcall	.+390    	; 0x4c6 <usart_send>
	usart_send(0x00);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	c1 d0       	rcall	.+386    	; 0x4c6 <usart_send>
	gyroX = spiTransferAll(0x20000000,3);	//Pos. X direction
 344:	43 e0       	ldi	r20, 0x03	; 3
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e2       	ldi	r25, 0x20	; 32
 350:	e8 d0       	rcall	.+464    	; 0x522 <spiTransferAll>
 352:	60 93 09 01 	sts	0x0109, r22
 356:	70 93 0a 01 	sts	0x010A, r23
 35a:	80 93 0b 01 	sts	0x010B, r24
 35e:	90 93 0c 01 	sts	0x010C, r25
						
	usart_send((uint8_t)(gyroX>>24));		//Send most significant byte first
 362:	89 2f       	mov	r24, r25
 364:	b0 d0       	rcall	.+352    	; 0x4c6 <usart_send>
	usart_send((uint8_t)(gyroX>>16));		//Send next byte
 366:	80 91 0b 01 	lds	r24, 0x010B
 36a:	ad d0       	rcall	.+346    	; 0x4c6 <usart_send>
	usart_send((uint8_t)(gyroX>>8));		//Send next byte
 36c:	80 91 0a 01 	lds	r24, 0x010A
 370:	aa d0       	rcall	.+340    	; 0x4c6 <usart_send>
	usart_send((uint8_t)gyroX);				//Send last byte
 372:	80 91 09 01 	lds	r24, 0x0109
 376:	a7 d0       	rcall	.+334    	; 0x4c6 <usart_send>
	gyroY = spiTransferAll(0x20000000,2);	//Neg. Y direction
 378:	42 e0       	ldi	r20, 0x02	; 2
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e2       	ldi	r25, 0x20	; 32
 384:	ce d0       	rcall	.+412    	; 0x522 <spiTransferAll>
 386:	60 93 16 01 	sts	0x0116, r22
 38a:	70 93 17 01 	sts	0x0117, r23
 38e:	80 93 18 01 	sts	0x0118, r24
 392:	90 93 19 01 	sts	0x0119, r25

	usart_send((uint8_t)(gyroY>>24));		//Send most significant byte first
 396:	89 2f       	mov	r24, r25
 398:	96 d0       	rcall	.+300    	; 0x4c6 <usart_send>
	usart_send((uint8_t)(gyroY>>16));		//Send next byte
 39a:	80 91 18 01 	lds	r24, 0x0118
 39e:	93 d0       	rcall	.+294    	; 0x4c6 <usart_send>
	usart_send((uint8_t)(gyroY>>8));		//Send next byte
 3a0:	80 91 17 01 	lds	r24, 0x0117
 3a4:	90 d0       	rcall	.+288    	; 0x4c6 <usart_send>
	usart_send((uint8_t)gyroY);				//Send last byte
 3a6:	80 91 16 01 	lds	r24, 0x0116
 3aa:	8d d0       	rcall	.+282    	; 0x4c6 <usart_send>
	gyroZ = spiTransferAll(0x20000000,1);	//Pos. Z direction
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e2       	ldi	r25, 0x20	; 32
 3b8:	b4 d0       	rcall	.+360    	; 0x522 <spiTransferAll>
 3ba:	60 93 11 01 	sts	0x0111, r22
 3be:	70 93 12 01 	sts	0x0112, r23
 3c2:	80 93 13 01 	sts	0x0113, r24
 3c6:	90 93 14 01 	sts	0x0114, r25

	usart_send((uint8_t)(gyroZ>>24));		//Send most significant byte first
 3ca:	89 2f       	mov	r24, r25
 3cc:	7c d0       	rcall	.+248    	; 0x4c6 <usart_send>
	usart_send((uint8_t)(gyroZ>>16));		//Send next byte
 3ce:	80 91 13 01 	lds	r24, 0x0113
 3d2:	79 d0       	rcall	.+242    	; 0x4c6 <usart_send>
	usart_send((uint8_t)(gyroZ>>8));		//Send next byte
 3d4:	80 91 12 01 	lds	r24, 0x0112
 3d8:	76 d0       	rcall	.+236    	; 0x4c6 <usart_send>
	usart_send((uint8_t)gyroZ);				//Send last byte
 3da:	80 91 11 01 	lds	r24, 0x0111
 3de:	73 d0       	rcall	.+230    	; 0x4c6 <usart_send>
	adc_value = read_adc(1);				//Neg. X direction (corresponding to y in acc)
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	79 d0       	rcall	.+242    	; 0x4d6 <read_adc>
 3e4:	80 93 0f 01 	sts	0x010F, r24
 3e8:	90 93 10 01 	sts	0x0110, r25
	adc_x_hi = (uint8_t)(adc_value>>8);
 3ec:	90 93 0e 01 	sts	0x010E, r25
	adc_x_lo = (uint8_t)adc_value;
 3f0:	80 93 08 01 	sts	0x0108, r24
	usart_send(adc_x_hi);
 3f4:	89 2f       	mov	r24, r25
 3f6:	67 d0       	rcall	.+206    	; 0x4c6 <usart_send>
	usart_send(adc_x_lo);
 3f8:	80 91 08 01 	lds	r24, 0x0108
 3fc:	64 d0       	rcall	.+200    	; 0x4c6 <usart_send>
	adc_value = read_adc(2);				//Neg. Y direction (corresponding to x in acc)
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	6a d0       	rcall	.+212    	; 0x4d6 <read_adc>
 402:	80 93 0f 01 	sts	0x010F, r24
 406:	90 93 10 01 	sts	0x0110, r25
	adc_y_hi = (uint8_t)(adc_value>>8);
 40a:	90 93 15 01 	sts	0x0115, r25
	adc_y_lo = (uint8_t)adc_value;
 40e:	80 93 06 01 	sts	0x0106, r24
	usart_send(adc_y_hi);
 412:	89 2f       	mov	r24, r25
 414:	58 d0       	rcall	.+176    	; 0x4c6 <usart_send>
	usart_send(adc_y_lo);
 416:	80 91 06 01 	lds	r24, 0x0106
 41a:	55 d0       	rcall	.+170    	; 0x4c6 <usart_send>
	adc_value = read_adc(0);				//Neg. Z direction (corresponding to z in acc)
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	5b d0       	rcall	.+182    	; 0x4d6 <read_adc>
 420:	80 93 0f 01 	sts	0x010F, r24
 424:	90 93 10 01 	sts	0x0110, r25
	adc_z_hi = (uint8_t)(adc_value>>8);
 428:	90 93 07 01 	sts	0x0107, r25
	adc_z_lo = (uint8_t)adc_value;
 42c:	80 93 0d 01 	sts	0x010D, r24
	usart_send(adc_z_hi);
 430:	89 2f       	mov	r24, r25
 432:	49 d0       	rcall	.+146    	; 0x4c6 <usart_send>
	usart_send(adc_z_lo);
 434:	80 91 0d 01 	lds	r24, 0x010D
 438:	46 d0       	rcall	.+140    	; 0x4c6 <usart_send>
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0b be       	out	0x3b, r0	; 59
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <init_ADC>:
 460:	ec e7       	ldi	r30, 0x7C	; 124
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	8f 77       	andi	r24, 0x7F	; 127
 468:	80 83       	st	Z, r24
 46a:	80 81       	ld	r24, Z
 46c:	80 64       	ori	r24, 0x40	; 64
 46e:	80 83       	st	Z, r24
 470:	80 81       	ld	r24, Z
 472:	8f 7d       	andi	r24, 0xDF	; 223
 474:	80 83       	st	Z, r24
 476:	ea e7       	ldi	r30, 0x7A	; 122
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	86 60       	ori	r24, 0x06	; 6
 47e:	80 83       	st	Z, r24
 480:	80 81       	ld	r24, Z
 482:	80 68       	ori	r24, 0x80	; 128
 484:	80 83       	st	Z, r24
 486:	80 81       	ld	r24, Z
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	80 83       	st	Z, r24
 48c:	08 95       	ret

0000048e <init_timer>:
 48e:	e1 e8       	ldi	r30, 0x81	; 129
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	8a 60       	ori	r24, 0x0A	; 10
 496:	80 83       	st	Z, r24
 498:	ef e6       	ldi	r30, 0x6F	; 111
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	80 83       	st	Z, r24
 4a2:	8f e0       	ldi	r24, 0x0F	; 15
 4a4:	97 e2       	ldi	r25, 0x27	; 39
 4a6:	90 93 89 00 	sts	0x0089, r25
 4aa:	80 93 88 00 	sts	0x0088, r24
 4ae:	08 95       	ret

000004b0 <usart_init>:
 4b0:	90 93 cd 00 	sts	0x00CD, r25
 4b4:	80 93 cc 00 	sts	0x00CC, r24
 4b8:	86 e0       	ldi	r24, 0x06	; 6
 4ba:	80 93 ca 00 	sts	0x00CA, r24
 4be:	88 e0       	ldi	r24, 0x08	; 8
 4c0:	80 93 c9 00 	sts	0x00C9, r24
 4c4:	08 95       	ret

000004c6 <usart_send>:
 4c6:	e8 ec       	ldi	r30, 0xC8	; 200
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	90 81       	ld	r25, Z
 4cc:	95 ff       	sbrs	r25, 5
 4ce:	fd cf       	rjmp	.-6      	; 0x4ca <usart_send+0x4>
 4d0:	80 93 ce 00 	sts	0x00CE, r24
 4d4:	08 95       	ret

000004d6 <read_adc>:
 4d6:	ec e7       	ldi	r30, 0x7C	; 124
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	90 81       	ld	r25, Z
 4dc:	90 7f       	andi	r25, 0xF0	; 240
 4de:	90 83       	st	Z, r25
 4e0:	90 81       	ld	r25, Z
 4e2:	89 2b       	or	r24, r25
 4e4:	80 83       	st	Z, r24
 4e6:	ea e7       	ldi	r30, 0x7A	; 122
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	80 64       	ori	r24, 0x40	; 64
 4ee:	80 83       	st	Z, r24
 4f0:	80 81       	ld	r24, Z
 4f2:	86 fd       	sbrc	r24, 6
 4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <read_adc+0x1a>
 4f6:	20 91 78 00 	lds	r18, 0x0078
 4fa:	30 91 79 00 	lds	r19, 0x0079
 4fe:	82 2f       	mov	r24, r18
 500:	93 2f       	mov	r25, r19
 502:	08 95       	ret

00000504 <spiInit>:
#include <util/delay.h>
#include "spi.h"
#include "init.h"
void spiInit()
{
	DDRB = (1<<1)|(1<<2)|(1<<4)|(1<<5)|(1<<6);
 504:	86 e7       	ldi	r24, 0x76	; 118
 506:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<MSTR)|(1<<SPE);
 508:	80 e5       	ldi	r24, 0x50	; 80
 50a:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	8d bd       	out	0x2d, r24	; 45
	PORTB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
 510:	85 b1       	in	r24, 0x05	; 5
 512:	80 67       	ori	r24, 0x70	; 112
 514:	85 b9       	out	0x05, r24	; 5
 516:	08 95       	ret

00000518 <spiSendByte>:
}

void spiSendByte(uint8_t data)
{
	SPDR = data;
 518:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission complete*/
	while(!(SPSR & (1<<SPIF)));
 51a:	0d b4       	in	r0, 0x2d	; 45
 51c:	07 fe       	sbrs	r0, 7
 51e:	fd cf       	rjmp	.-6      	; 0x51a <spiSendByte+0x2>
}
 520:	08 95       	ret

00000522 <spiTransferAll>:


/* Function to send 32 bit command and receive 32 bit data*/
uint32_t spiTransferAll(uint32_t data, int CS)
{
 522:	af 92       	push	r10
 524:	bf 92       	push	r11
 526:	cf 92       	push	r12
 528:	df 92       	push	r13
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	a6 2e       	mov	r10, r22
 538:	b7 2e       	mov	r11, r23
 53a:	18 2f       	mov	r17, r24
 53c:	89 2f       	mov	r24, r25
 53e:	ea 01       	movw	r28, r20
	uint32_t outdata;
	PORTB &= ~(1<<PB0);					//Possibly needed to start CLK
 540:	28 98       	cbi	0x05, 0	; 5
	if (CS == 1)
 542:	41 30       	cpi	r20, 0x01	; 1
 544:	51 05       	cpc	r21, r1
 546:	11 f4       	brne	.+4      	; 0x54c <spiTransferAll+0x2a>
	{
		PORTB &= ~(1<<PB4);				//Set CS1 low
 548:	2c 98       	cbi	0x05, 4	; 5
 54a:	09 c0       	rjmp	.+18     	; 0x55e <spiTransferAll+0x3c>
	}
	if (CS == 2)
 54c:	42 30       	cpi	r20, 0x02	; 2
 54e:	51 05       	cpc	r21, r1
 550:	11 f4       	brne	.+4      	; 0x556 <spiTransferAll+0x34>
	{
		PORTB &= ~(1<<PB5);				//Set CS2 low
 552:	2d 98       	cbi	0x05, 5	; 5
 554:	04 c0       	rjmp	.+8      	; 0x55e <spiTransferAll+0x3c>
	}	 
	if (CS == 3)
 556:	43 30       	cpi	r20, 0x03	; 3
 558:	51 05       	cpc	r21, r1
 55a:	09 f4       	brne	.+2      	; 0x55e <spiTransferAll+0x3c>
	{
		PORTB &= ~(1<<PB6);				//Set CS3 low
 55c:	2e 98       	cbi	0x05, 6	; 5
	}
	outdata = 0;
	spiSendByte((uint8_t)(data>>24));	//Send most significant byte first
 55e:	dc df       	rcall	.-72     	; 0x518 <spiSendByte>
	outdata = ((uint32_t)SPDR)<<24;
 560:	ce b4       	in	r12, 0x2e	; 46
 562:	d1 2c       	mov	r13, r1
 564:	e1 2c       	mov	r14, r1
 566:	f1 2c       	mov	r15, r1
 568:	fc 2c       	mov	r15, r12
 56a:	ee 24       	eor	r14, r14
 56c:	dd 24       	eor	r13, r13
 56e:	cc 24       	eor	r12, r12
	spiSendByte((uint8_t)(data>>16));	//Send next byte
 570:	81 2f       	mov	r24, r17
 572:	d2 df       	rcall	.-92     	; 0x518 <spiSendByte>
	outdata |= ((uint32_t)SPDR)<<16;		
 574:	1e b5       	in	r17, 0x2e	; 46
	spiSendByte((uint8_t)(data>>8));	//Send next byte
 576:	8b 2d       	mov	r24, r11
 578:	cf df       	rcall	.-98     	; 0x518 <spiSendByte>
	outdata |= ((uint32_t)SPDR)<<8;
 57a:	be b4       	in	r11, 0x2e	; 46
	spiSendByte((uint8_t)data);			//Send last byte
 57c:	8a 2d       	mov	r24, r10
 57e:	cc df       	rcall	.-104    	; 0x518 <spiSendByte>
	outdata |= ((uint32_t)SPDR);
 580:	8e b5       	in	r24, 0x2e	; 46
	}
	outdata = 0;
	spiSendByte((uint8_t)(data>>24));	//Send most significant byte first
	outdata = ((uint32_t)SPDR)<<24;
	spiSendByte((uint8_t)(data>>16));	//Send next byte
	outdata |= ((uint32_t)SPDR)<<16;		
 582:	b7 01       	movw	r22, r14
 584:	a6 01       	movw	r20, r12
 586:	61 2b       	or	r22, r17
 588:	8a 01       	movw	r16, r20
 58a:	9b 01       	movw	r18, r22
	spiSendByte((uint8_t)(data>>8));	//Send next byte
	outdata |= ((uint32_t)SPDR)<<8;
 58c:	08 2b       	or	r16, r24
	spiSendByte((uint8_t)data);			//Send last byte
	outdata |= ((uint32_t)SPDR);
 58e:	1b 29       	or	r17, r11
	if (CS == 1)
 590:	c1 30       	cpi	r28, 0x01	; 1
 592:	d1 05       	cpc	r29, r1
 594:	11 f4       	brne	.+4      	; 0x59a <spiTransferAll+0x78>
	{
		PORTB |= (1<<PB4);				//Set CS1 high
 596:	2c 9a       	sbi	0x05, 4	; 5
 598:	08 c0       	rjmp	.+16     	; 0x5aa <spiTransferAll+0x88>
	}
	if (CS == 2)
 59a:	c2 30       	cpi	r28, 0x02	; 2
 59c:	d1 05       	cpc	r29, r1
 59e:	11 f4       	brne	.+4      	; 0x5a4 <spiTransferAll+0x82>
	{
		PORTB |= (1<<PB5);				//Set CS2 high
 5a0:	2d 9a       	sbi	0x05, 5	; 5
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <spiTransferAll+0x88>
	}
	if (CS == 3)
 5a4:	23 97       	sbiw	r28, 0x03	; 3
 5a6:	09 f4       	brne	.+2      	; 0x5aa <spiTransferAll+0x88>
	{
		PORTB |= (1<<PB6);				//Set CS3 high
 5a8:	2e 9a       	sbi	0x05, 6	; 5
	}
	PORTB |= (1<<PB0);
 5aa:	28 9a       	sbi	0x05, 0	; 5
	return outdata;
}
 5ac:	60 2f       	mov	r22, r16
 5ae:	71 2f       	mov	r23, r17
 5b0:	82 2f       	mov	r24, r18
 5b2:	93 2f       	mov	r25, r19
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
