
IMU_v_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000366  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800106  00800106  00000400  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c43  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00000c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001032  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000076b  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ce7  00000000  00000000  0000253f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000238  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000049a  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000977  00000000  00000000  000038fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  00004271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a6 e0       	ldi	r26, 0x06	; 6
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	aa 31       	cpi	r26, 0x1A	; 26
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e6 e6       	ldi	r30, 0x66	; 102
  b8:	f3 e0       	ldi	r31, 0x03	; 3
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
  ca:	02 d0       	rcall	.+4      	; 0xd0 <main>
  cc:	4a c1       	rjmp	.+660    	; 0x362 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <main>:
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	d0 d0       	rcall	.+416    	; 0x276 <usart_init>
  d6:	b8 d0       	rcall	.+368    	; 0x248 <init_ADC>
  d8:	e1 d0       	rcall	.+450    	; 0x29c <spiInit>
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	80 e7       	ldi	r24, 0x70	; 112
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x10>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x1a>
  ea:	00 00       	nop
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e2       	ldi	r25, 0x20	; 32
  f8:	e0 d0       	rcall	.+448    	; 0x2ba <spiTransferAll>
  fa:	60 93 11 01 	sts	0x0111, r22
  fe:	70 93 12 01 	sts	0x0112, r23
 102:	80 93 13 01 	sts	0x0113, r24
 106:	90 93 14 01 	sts	0x0114, r25
 10a:	2f e7       	ldi	r18, 0x7F	; 127
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x40>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x4a>
 11a:	00 00       	nop
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e2       	ldi	r25, 0x20	; 32
 128:	c8 d0       	rcall	.+400    	; 0x2ba <spiTransferAll>
 12a:	60 93 11 01 	sts	0x0111, r22
 12e:	70 93 12 01 	sts	0x0112, r23
 132:	80 93 13 01 	sts	0x0113, r24
 136:	90 93 14 01 	sts	0x0114, r25
 13a:	2f e7       	ldi	r18, 0x7F	; 127
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x70>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x7a>
 14a:	00 00       	nop
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e2       	ldi	r25, 0x20	; 32
 158:	b0 d0       	rcall	.+352    	; 0x2ba <spiTransferAll>
 15a:	60 93 11 01 	sts	0x0111, r22
 15e:	70 93 12 01 	sts	0x0112, r23
 162:	80 93 13 01 	sts	0x0113, r24
 166:	90 93 14 01 	sts	0x0114, r25
 16a:	87 ec       	ldi	r24, 0xC7	; 199
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x9e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xa4>
 174:	00 00       	nop
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e2       	ldi	r25, 0x20	; 32
 182:	9b d0       	rcall	.+310    	; 0x2ba <spiTransferAll>
 184:	60 93 11 01 	sts	0x0111, r22
 188:	70 93 12 01 	sts	0x0112, r23
 18c:	80 93 13 01 	sts	0x0113, r24
 190:	90 93 14 01 	sts	0x0114, r25
 194:	87 ec       	ldi	r24, 0xC7	; 199
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xc8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xce>
 19e:	00 00       	nop
 1a0:	78 94       	sei
 1a2:	c1 e1       	ldi	r28, 0x11	; 17
 1a4:	d1 e0       	ldi	r29, 0x01	; 1
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	71 d0       	rcall	.+226    	; 0x28c <usart_send>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	6f d0       	rcall	.+222    	; 0x28c <usart_send>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	6d d0       	rcall	.+218    	; 0x28c <usart_send>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	6b d0       	rcall	.+214    	; 0x28c <usart_send>
 1b6:	9f ef       	ldi	r25, 0xFF	; 255
 1b8:	24 e3       	ldi	r18, 0x34	; 52
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	91 50       	subi	r25, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0xec>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0xf6>
 1c6:	00 00       	nop
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e2       	ldi	r25, 0x20	; 32
 1d4:	72 d0       	rcall	.+228    	; 0x2ba <spiTransferAll>
 1d6:	60 93 11 01 	sts	0x0111, r22
 1da:	70 93 12 01 	sts	0x0112, r23
 1de:	80 93 13 01 	sts	0x0113, r24
 1e2:	90 93 14 01 	sts	0x0114, r25
 1e6:	87 ec       	ldi	r24, 0xC7	; 199
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x11a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x120>
 1f0:	00 00       	nop
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e2       	ldi	r25, 0x20	; 32
 1fe:	5d d0       	rcall	.+186    	; 0x2ba <spiTransferAll>
 200:	60 93 11 01 	sts	0x0111, r22
 204:	70 93 12 01 	sts	0x0112, r23
 208:	80 93 13 01 	sts	0x0113, r24
 20c:	90 93 14 01 	sts	0x0114, r25
 210:	87 ec       	ldi	r24, 0xC7	; 199
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x144>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x14a>
 21a:	00 00       	nop
 21c:	80 91 14 01 	lds	r24, 0x0114
 220:	35 d0       	rcall	.+106    	; 0x28c <usart_send>
 222:	80 91 13 01 	lds	r24, 0x0113
 226:	32 d0       	rcall	.+100    	; 0x28c <usart_send>
 228:	80 91 12 01 	lds	r24, 0x0112
 22c:	2f d0       	rcall	.+94     	; 0x28c <usart_send>
 22e:	88 81       	ld	r24, Y
 230:	2d d0       	rcall	.+90     	; 0x28c <usart_send>
 232:	b9 cf       	rjmp	.-142    	; 0x1a6 <main+0xd6>

00000234 <__vector_12>:
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <init_ADC>:
 248:	ec e7       	ldi	r30, 0x7C	; 124
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	80 83       	st	Z, r24
 252:	80 81       	ld	r24, Z
 254:	80 64       	ori	r24, 0x40	; 64
 256:	80 83       	st	Z, r24
 258:	80 81       	ld	r24, Z
 25a:	8f 7d       	andi	r24, 0xDF	; 223
 25c:	80 83       	st	Z, r24
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	86 60       	ori	r24, 0x06	; 6
 266:	80 83       	st	Z, r24
 268:	80 81       	ld	r24, Z
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	80 83       	st	Z, r24
 26e:	80 81       	ld	r24, Z
 270:	80 64       	ori	r24, 0x40	; 64
 272:	80 83       	st	Z, r24
}

void init_timer(void){		//Timer for creating interrupts to send measured data (CTC)
	TCCR1B |= (1<<WGM12)|(1<<CS11);  //Set in CTC-mode, compare with OCR1A, fIO/8
	TIMSK1 |= (1<<OCIE1A);	//Enable compare match interrupt
	OCR1A = 0x270F;			//0x270F with fIO/8 creates a 100 Hz interrupt frequency
 274:	08 95       	ret

00000276 <usart_init>:
}

//The USART function are taken from Larsmark
void usart_init(uint16_t baudrate) {
	/* Set baud rate */
	UBRR1H = (uint8_t) (baudrate>>8);
 276:	90 93 cd 00 	sts	0x00CD, r25
	UBRR1L = (uint8_t) baudrate;
 27a:	80 93 cc 00 	sts	0x00CC, r24
	/* Set frame format: 8data, no parity & 1 stop bits */
	UCSR1C = (0<<UMSEL0) | (0<<USBS0) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCSZ2);
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	80 93 ca 00 	sts	0x00CA, r24
	/* Enable receiver, transmitter and receive interrupt */
	//UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
	UCSR1B = (1<<TXEN1); 
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	80 93 c9 00 	sts	0x00C9, r24
 28a:	08 95       	ret

0000028c <usart_send>:
}

void usart_send(unsigned char data){
	/* Wait for empty transmit buffer */
	while (!( UCSR1A & (1<<UDRE1)));
 28c:	e8 ec       	ldi	r30, 0xC8	; 200
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	90 81       	ld	r25, Z
 292:	95 ff       	sbrs	r25, 5
 294:	fd cf       	rjmp	.-6      	; 0x290 <usart_send+0x4>
	/* Put data into buffer, sends the data */
	UDR1 = data;
 296:	80 93 ce 00 	sts	0x00CE, r24
 29a:	08 95       	ret

0000029c <spiInit>:
#include <util/delay.h>
#include "spi_1.h"
#include "init.h"
void spiInit()
{
	DDRB = (1<<1)|(1<<2)|(1<<4)|(1<<5)|(1<<6);
 29c:	86 e7       	ldi	r24, 0x76	; 118
 29e:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<MSTR)|(1<<SPE);
 2a0:	80 e5       	ldi	r24, 0x50	; 80
 2a2:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	8d bd       	out	0x2d, r24	; 45
	PORTB |= (1<<PB4)|(1<<PB5)|(1<<PB6);
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	80 67       	ori	r24, 0x70	; 112
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	08 95       	ret

000002b0 <spiSendByte>:
}

void spiSendByte(uint8_t data)
{
	SPDR = data;
 2b0:	8e bd       	out	0x2e, r24	; 46
	/*Wait for transmission complete*/
	while(!(SPSR & (1<<SPIF)));
 2b2:	0d b4       	in	r0, 0x2d	; 45
 2b4:	07 fe       	sbrs	r0, 7
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <spiSendByte+0x2>
}
 2b8:	08 95       	ret

000002ba <spiTransferAll>:


/* Function to send 32 bit command and receive 32 bit data*/
uint32_t spiTransferAll(uint32_t data, int CS)
{
 2ba:	af 92       	push	r10
 2bc:	bf 92       	push	r11
 2be:	cf 92       	push	r12
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	a6 2e       	mov	r10, r22
 2d0:	b7 2e       	mov	r11, r23
 2d2:	18 2f       	mov	r17, r24
 2d4:	89 2f       	mov	r24, r25
 2d6:	ea 01       	movw	r28, r20
	uint32_t outdata;
	PORTB &= ~(1<<PB0);					//Possibly needed to start CLK
 2d8:	28 98       	cbi	0x05, 0	; 5
	if (CS == 1)
 2da:	41 30       	cpi	r20, 0x01	; 1
 2dc:	51 05       	cpc	r21, r1
 2de:	11 f4       	brne	.+4      	; 0x2e4 <spiTransferAll+0x2a>
	{
		PORTB &= ~(1<<PB4);				//Set CS1 low
 2e0:	2c 98       	cbi	0x05, 4	; 5
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <spiTransferAll+0x3c>
	}
	if (CS == 2)
 2e4:	42 30       	cpi	r20, 0x02	; 2
 2e6:	51 05       	cpc	r21, r1
 2e8:	11 f4       	brne	.+4      	; 0x2ee <spiTransferAll+0x34>
	{
		PORTB &= ~(1<<PB5);				//Set CS2 low
 2ea:	2d 98       	cbi	0x05, 5	; 5
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <spiTransferAll+0x3c>
	}	 
	if (CS == 3)
 2ee:	43 30       	cpi	r20, 0x03	; 3
 2f0:	51 05       	cpc	r21, r1
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <spiTransferAll+0x3c>
	{
		PORTB &= ~(1<<PB6);				//Set CS3 low
 2f4:	2e 98       	cbi	0x05, 6	; 5
	}
	outdata = 0;
	spiSendByte((uint8_t)(data>>24));	//Send most significant byte first
 2f6:	dc df       	rcall	.-72     	; 0x2b0 <spiSendByte>
	outdata = ((uint32_t)SPDR)<<24;
 2f8:	ce b4       	in	r12, 0x2e	; 46
 2fa:	d1 2c       	mov	r13, r1
 2fc:	e1 2c       	mov	r14, r1
 2fe:	f1 2c       	mov	r15, r1
 300:	fc 2c       	mov	r15, r12
 302:	ee 24       	eor	r14, r14
 304:	dd 24       	eor	r13, r13
 306:	cc 24       	eor	r12, r12
	spiSendByte((uint8_t)(data>>16));	//Send next byte
 308:	81 2f       	mov	r24, r17
 30a:	d2 df       	rcall	.-92     	; 0x2b0 <spiSendByte>
	outdata |= ((uint32_t)SPDR)<<16;		
 30c:	1e b5       	in	r17, 0x2e	; 46
	spiSendByte((uint8_t)(data>>8));	//Send next byte
 30e:	8b 2d       	mov	r24, r11
 310:	cf df       	rcall	.-98     	; 0x2b0 <spiSendByte>
	outdata |= ((uint32_t)SPDR)<<8;
 312:	be b4       	in	r11, 0x2e	; 46
	spiSendByte((uint8_t)data);			//Send last byte
 314:	8a 2d       	mov	r24, r10
 316:	cc df       	rcall	.-104    	; 0x2b0 <spiSendByte>
	outdata |= ((uint32_t)SPDR);
 318:	8e b5       	in	r24, 0x2e	; 46
	}
	outdata = 0;
	spiSendByte((uint8_t)(data>>24));	//Send most significant byte first
	outdata = ((uint32_t)SPDR)<<24;
	spiSendByte((uint8_t)(data>>16));	//Send next byte
	outdata |= ((uint32_t)SPDR)<<16;		
 31a:	b7 01       	movw	r22, r14
 31c:	a6 01       	movw	r20, r12
 31e:	61 2b       	or	r22, r17
 320:	8a 01       	movw	r16, r20
 322:	9b 01       	movw	r18, r22
	spiSendByte((uint8_t)(data>>8));	//Send next byte
	outdata |= ((uint32_t)SPDR)<<8;
 324:	08 2b       	or	r16, r24
	spiSendByte((uint8_t)data);			//Send last byte
	outdata |= ((uint32_t)SPDR);
 326:	1b 29       	or	r17, r11
	if (CS == 1)
 328:	c1 30       	cpi	r28, 0x01	; 1
 32a:	d1 05       	cpc	r29, r1
 32c:	11 f4       	brne	.+4      	; 0x332 <spiTransferAll+0x78>
	{
		PORTB |= (1<<PB4);				//Set CS1 high
 32e:	2c 9a       	sbi	0x05, 4	; 5
 330:	08 c0       	rjmp	.+16     	; 0x342 <spiTransferAll+0x88>
	}
	if (CS == 2)
 332:	c2 30       	cpi	r28, 0x02	; 2
 334:	d1 05       	cpc	r29, r1
 336:	11 f4       	brne	.+4      	; 0x33c <spiTransferAll+0x82>
	{
		PORTB |= (1<<PB5);				//Set CS2 high
 338:	2d 9a       	sbi	0x05, 5	; 5
 33a:	03 c0       	rjmp	.+6      	; 0x342 <spiTransferAll+0x88>
	}
	if (CS == 3)
 33c:	23 97       	sbiw	r28, 0x03	; 3
 33e:	09 f4       	brne	.+2      	; 0x342 <spiTransferAll+0x88>
	{
		PORTB |= (1<<PB6);				//Set CS3 high
 340:	2e 9a       	sbi	0x05, 6	; 5
	}
	PORTB |= (1<<PB0);
 342:	28 9a       	sbi	0x05, 0	; 5
	return outdata;
}
 344:	60 2f       	mov	r22, r16
 346:	71 2f       	mov	r23, r17
 348:	82 2f       	mov	r24, r18
 34a:	93 2f       	mov	r25, r19
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	cf 90       	pop	r12
 35c:	bf 90       	pop	r11
 35e:	af 90       	pop	r10
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
