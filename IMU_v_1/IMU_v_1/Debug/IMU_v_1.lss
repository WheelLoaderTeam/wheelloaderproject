
IMU_v_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000003ce  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c13  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f1d  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000778  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ca7  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000048d  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a06  00000000  00000000  000037ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  000041b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	b6 c0       	rjmp	.+364    	; 0x19e <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a6 e0       	ldi	r26, 0x06	; 6
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 31       	cpi	r26, 0x10	; 16
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e4 e3       	ldi	r30, 0x34	; 52
  b8:	f3 e0       	ldi	r31, 0x03	; 3
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
  ca:	02 d0       	rcall	.+4      	; 0xd0 <main>
  cc:	31 c1       	rjmp	.+610    	; 0x330 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <main>:
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	b6 d0       	rcall	.+364    	; 0x242 <usart_init>
  d6:	8d d0       	rcall	.+282    	; 0x1f2 <init_ADC>
  d8:	a3 d0       	rcall	.+326    	; 0x220 <init_timer>
  da:	c6 d0       	rcall	.+396    	; 0x268 <spiInit>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x12>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x1c>
  ec:	00 00       	nop
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e2       	ldi	r25, 0x20	; 32
  fa:	c0 d0       	rcall	.+384    	; 0x27c <spiTransferAll>
  fc:	70 93 0e 01 	sts	0x010E, r23
 100:	60 93 0d 01 	sts	0x010D, r22
 104:	2f e7       	ldi	r18, 0x7F	; 127
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x3a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x44>
 114:	00 00       	nop
 116:	cd e0       	ldi	r28, 0x0D	; 13
 118:	d1 e0       	ldi	r29, 0x01	; 1
 11a:	88 81       	ld	r24, Y
 11c:	9d d0       	rcall	.+314    	; 0x258 <usart_send>
 11e:	88 81       	ld	r24, Y
 120:	9b d0       	rcall	.+310    	; 0x258 <usart_send>
 122:	80 91 0e 01 	lds	r24, 0x010E
 126:	98 d0       	rcall	.+304    	; 0x258 <usart_send>
 128:	88 81       	ld	r24, Y
 12a:	96 d0       	rcall	.+300    	; 0x258 <usart_send>
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e2       	ldi	r25, 0x20	; 32
 138:	a1 d0       	rcall	.+322    	; 0x27c <spiTransferAll>
 13a:	70 93 0e 01 	sts	0x010E, r23
 13e:	60 93 0d 01 	sts	0x010D, r22
 142:	2f e7       	ldi	r18, 0x7F	; 127
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x78>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x82>
 152:	00 00       	nop
 154:	88 81       	ld	r24, Y
 156:	80 d0       	rcall	.+256    	; 0x258 <usart_send>
 158:	88 81       	ld	r24, Y
 15a:	7e d0       	rcall	.+252    	; 0x258 <usart_send>
 15c:	80 91 0e 01 	lds	r24, 0x010E
 160:	7b d0       	rcall	.+246    	; 0x258 <usart_send>
 162:	88 81       	ld	r24, Y
 164:	79 d0       	rcall	.+242    	; 0x258 <usart_send>
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e2       	ldi	r25, 0x20	; 32
 172:	84 d0       	rcall	.+264    	; 0x27c <spiTransferAll>
 174:	70 93 0e 01 	sts	0x010E, r23
 178:	60 93 0d 01 	sts	0x010D, r22
 17c:	87 ec       	ldi	r24, 0xC7	; 199
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xb0>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xb6>
 186:	00 00       	nop
 188:	88 81       	ld	r24, Y
 18a:	66 d0       	rcall	.+204    	; 0x258 <usart_send>
 18c:	88 81       	ld	r24, Y
 18e:	64 d0       	rcall	.+200    	; 0x258 <usart_send>
 190:	80 91 0e 01 	lds	r24, 0x010E
 194:	61 d0       	rcall	.+194    	; 0x258 <usart_send>
 196:	88 81       	ld	r24, Y
 198:	5f d0       	rcall	.+190    	; 0x258 <usart_send>
 19a:	78 94       	sei
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0xcc>

0000019e <__vector_12>:
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	0b b6       	in	r0, 0x3b	; 59
 1aa:	0f 92       	push	r0
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
 1c4:	89 e4       	ldi	r24, 0x49	; 73
 1c6:	48 d0       	rcall	.+144    	; 0x258 <usart_send>
 1c8:	89 e5       	ldi	r24, 0x59	; 89
 1ca:	46 d0       	rcall	.+140    	; 0x258 <usart_send>
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0b be       	out	0x3b, r0	; 59
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <init_ADC>:
 1f2:	ec e7       	ldi	r30, 0x7C	; 124
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	80 83       	st	Z, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24
 202:	80 81       	ld	r24, Z
 204:	8f 7d       	andi	r24, 0xDF	; 223
 206:	80 83       	st	Z, r24
 208:	ea e7       	ldi	r30, 0x7A	; 122
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	86 60       	ori	r24, 0x06	; 6
 210:	80 83       	st	Z, r24
 212:	80 81       	ld	r24, Z
 214:	80 68       	ori	r24, 0x80	; 128
 216:	80 83       	st	Z, r24
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <init_timer>:
 220:	e1 e8       	ldi	r30, 0x81	; 129
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8a 60       	ori	r24, 0x0A	; 10
 228:	80 83       	st	Z, r24
 22a:	ef e6       	ldi	r30, 0x6F	; 111
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	82 60       	ori	r24, 0x02	; 2
 232:	80 83       	st	Z, r24
 234:	8f e0       	ldi	r24, 0x0F	; 15
 236:	97 e2       	ldi	r25, 0x27	; 39
 238:	90 93 89 00 	sts	0x0089, r25
 23c:	80 93 88 00 	sts	0x0088, r24
 240:	08 95       	ret

00000242 <usart_init>:
 242:	90 93 cd 00 	sts	0x00CD, r25
 246:	80 93 cc 00 	sts	0x00CC, r24
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	80 93 ca 00 	sts	0x00CA, r24
 250:	88 e9       	ldi	r24, 0x98	; 152
 252:	80 93 c9 00 	sts	0x00C9, r24
 256:	08 95       	ret

00000258 <usart_send>:
 258:	e8 ec       	ldi	r30, 0xC8	; 200
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 81       	ld	r25, Z
 25e:	95 ff       	sbrs	r25, 5
 260:	fd cf       	rjmp	.-6      	; 0x25c <usart_send+0x4>
 262:	80 93 ce 00 	sts	0x00CE, r24
 266:	08 95       	ret

00000268 <spiInit>:
 268:	80 e5       	ldi	r24, 0x50	; 80
 26a:	8c bd       	out	0x2c, r24	; 44
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	8d bd       	out	0x2d, r24	; 45
 270:	08 95       	ret

00000272 <spiSendByte>:
 272:	8e bd       	out	0x2e, r24	; 46
}
void spiSendByte(uint8_t data)
{
	SPDR = data;
	/*Wait for transmission complete*/
	while(!(SPSR & (1<<SPIF)));
 274:	0d b4       	in	r0, 0x2d	; 45
 276:	07 fe       	sbrs	r0, 7
 278:	fd cf       	rjmp	.-6      	; 0x274 <spiSendByte+0x2>
}
 27a:	08 95       	ret

0000027c <spiTransferAll>:


/* Function to send 32 bit command and receive 32 bit data*/
uint32_t spiTransferAll(uint32_t data, int CS)
{
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	16 2f       	mov	r17, r22
 290:	07 2f       	mov	r16, r23
 292:	f8 2e       	mov	r15, r24
 294:	89 2f       	mov	r24, r25
 296:	ea 01       	movw	r28, r20
	uint32_t outdata;
	PORTB &= ~(1<<PB0);
 298:	28 98       	cbi	0x05, 0	; 5
	if (CS == 1)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	51 05       	cpc	r21, r1
 29e:	11 f4       	brne	.+4      	; 0x2a4 <spiTransferAll+0x28>
	{
		PORTB &= ~(1<<PB4);	//Set CS1 low
 2a0:	2c 98       	cbi	0x05, 4	; 5
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <spiTransferAll+0x3a>
	}
	if (CS == 2)
 2a4:	42 30       	cpi	r20, 0x02	; 2
 2a6:	51 05       	cpc	r21, r1
 2a8:	11 f4       	brne	.+4      	; 0x2ae <spiTransferAll+0x32>
	{
		PORTB &= ~(1<<PB5);	//Set CS2 low
 2aa:	2d 98       	cbi	0x05, 5	; 5
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <spiTransferAll+0x3a>
	}	 
	if (CS == 3)
 2ae:	43 30       	cpi	r20, 0x03	; 3
 2b0:	51 05       	cpc	r21, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <spiTransferAll+0x3a>
	{
		PORTB &= ~(1<<PB6);	//Set CS3 low
 2b4:	2e 98       	cbi	0x05, 6	; 5
	}
	spiSendByte((uint8_t)(data>>24));  //Send most significant byte first
 2b6:	dd df       	rcall	.-70     	; 0x272 <spiSendByte>
	spiSendByte((uint8_t)(data>>16));	//Send next byte		
 2b8:	8f 2d       	mov	r24, r15
 2ba:	db df       	rcall	.-74     	; 0x272 <spiSendByte>
	spiSendByte((uint8_t)(data>>8));	//Send next byte
 2bc:	80 2f       	mov	r24, r16
 2be:	d9 df       	rcall	.-78     	; 0x272 <spiSendByte>
	spiSendByte((uint8_t)data);			//Send last byte
 2c0:	81 2f       	mov	r24, r17
 2c2:	d7 df       	rcall	.-82     	; 0x272 <spiSendByte>
	
	
	outdata = 0;
	spiSendByte(0x10);
 2c4:	80 e1       	ldi	r24, 0x10	; 16
 2c6:	d5 df       	rcall	.-86     	; 0x272 <spiSendByte>
	outdata = ((uint32_t)SPDR)<<24;
 2c8:	ce b4       	in	r12, 0x2e	; 46
 2ca:	d1 2c       	mov	r13, r1
 2cc:	e1 2c       	mov	r14, r1
 2ce:	f1 2c       	mov	r15, r1
 2d0:	fc 2c       	mov	r15, r12
 2d2:	ee 24       	eor	r14, r14
 2d4:	dd 24       	eor	r13, r13
 2d6:	cc 24       	eor	r12, r12
	spiSendByte(0x00);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	cb df       	rcall	.-106    	; 0x272 <spiSendByte>
	outdata |= ((uint32_t)SPDR)<<16;
 2dc:	1e b5       	in	r17, 0x2e	; 46
	spiSendByte(0x00);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	c8 df       	rcall	.-112    	; 0x272 <spiSendByte>
	outdata |= ((uint32_t)SPDR)<<8;
 2e2:	be b4       	in	r11, 0x2e	; 46
	spiSendByte(0x00);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	c5 df       	rcall	.-118    	; 0x272 <spiSendByte>
	outdata |= ((uint32_t)SPDR);
 2e8:	8e b5       	in	r24, 0x2e	; 46
	
	outdata = 0;
	spiSendByte(0x10);
	outdata = ((uint32_t)SPDR)<<24;
	spiSendByte(0x00);
	outdata |= ((uint32_t)SPDR)<<16;
 2ea:	b7 01       	movw	r22, r14
 2ec:	a6 01       	movw	r20, r12
 2ee:	61 2b       	or	r22, r17
 2f0:	8a 01       	movw	r16, r20
 2f2:	9b 01       	movw	r18, r22
	spiSendByte(0x00);
	outdata |= ((uint32_t)SPDR)<<8;
 2f4:	08 2b       	or	r16, r24
	spiSendByte(0x00);
	outdata |= ((uint32_t)SPDR);
 2f6:	1b 29       	or	r17, r11
		if (CS == 1)
 2f8:	c1 30       	cpi	r28, 0x01	; 1
 2fa:	d1 05       	cpc	r29, r1
 2fc:	11 f4       	brne	.+4      	; 0x302 <spiTransferAll+0x86>
		{
			PORTB |= (1<<PB4);	//Set CS1 low
 2fe:	2c 9a       	sbi	0x05, 4	; 5
 300:	08 c0       	rjmp	.+16     	; 0x312 <spiTransferAll+0x96>
		}
		if (CS == 2)
 302:	c2 30       	cpi	r28, 0x02	; 2
 304:	d1 05       	cpc	r29, r1
 306:	11 f4       	brne	.+4      	; 0x30c <spiTransferAll+0x90>
		{
			PORTB |= (1<<PB5);	//Set CS2 low
 308:	2d 9a       	sbi	0x05, 5	; 5
 30a:	03 c0       	rjmp	.+6      	; 0x312 <spiTransferAll+0x96>
		}
		if (CS == 3)
 30c:	23 97       	sbiw	r28, 0x03	; 3
 30e:	09 f4       	brne	.+2      	; 0x312 <spiTransferAll+0x96>
		{
			PORTB |= (1<<PB6);	//Set CS3 low
 310:	2e 9a       	sbi	0x05, 6	; 5
		}
		
		PORTB |= (1<<PB0);
 312:	28 9a       	sbi	0x05, 0	; 5
	return outdata;
}
 314:	60 2f       	mov	r22, r16
 316:	71 2f       	mov	r23, r17
 318:	82 2f       	mov	r24, r18
 31a:	93 2f       	mov	r25, r19
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	bf 90       	pop	r11
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
