#!/usr/bin/python

import sys, time, os.path, operator, serial, struct, os
__author__="Henrik Makitaavola"
__date__ ="$Nov 24, 2009 8:29:04 AM$"

# Some constants
serial_speed = 38400
SEND_MORE_BYTE = 0x76
SEND_OK_BYTE = 0x94
SEND_RESEND_BYTE = 0x52
# Buffer size in the MCU
REMOTE_BUF_SIZE = 400

def encode(val, dim):
    output = []
    for i in range(dim):
        output.append(val & 0xFF)
        val = val >> 8
    output.reverse()
    return output

# Creates a binary image from the information contained in the file specified
# by 'ihex'
def buildImage(ihex):
    all = []
    section = []
    end_addr = None
    offset = 0

    file = open(ihex, 'r')
    image = file.read();
    file.close()

    for line in image.split():
        #print "DEBUG:", line
        try:
            length = int(line[1:3], 16)
            addr = int(line[3:7], 16) + offset
            rectype = int(line[7:9], 16)
            data = []
            if len(line) > 11:
                data = [int(line[i:i+2], 16) for i in range(9, len(line)-2, 2)]
            crc = int(line[-2:], 16)
            if rectype in [0x00, 0x03]:
                if not end_addr:
                    end_addr = addr
                    start_addr = addr
                if end_addr != addr:
                    all.append((start_addr, section))
                    if rectype == 0x03:
                        # This last record updates the first 4 bytes which
                        # holds some low level configuration. They are the
                        # same all the time so I guess that's why they are
                        # skipped.
                        break
                    section = []
                    start_addr = addr
                section += data
                end_addr = addr + length
            elif rectype == 0x02:
                offset = int(line[9:9+4], 16) << 4
            elif rectype == 0x01:
                all.append((start_addr, section))
                section = []
                start_addr = addr
        except:
            print "Unable to parse \"%s\", check that it really is a ihex file." % ihex
            return []

    print('Ihex read complete:')
    print('  ' + '\n  '.join(["%5d bytes starting at 0x%X" % (len(l), a) for (a, l) in all]))
    print('  %d bytes in %d sections\n' % (reduce(operator.add, [len(l) for (_, l) in all]), len(all)))

    all_data = []
    all_data += encode(len(all), 2)
    for (addr, data) in all:
        all_data += encode(addr, 4) + encode(len(data), 4) + data
    return all_data

# Opens the serial port specified by 'device' with baud rate 'speed'
def openSerial(device, speed):
    global ser
    try:
        if sys.platform == "linux2" :
            ser = serial.Serial(device, speed, timeout=5)
            ser.open()
        elif sys.platform == "win32":
            # ser.open() is not needed under windows, dont know why
            ser = serial.Serial(int(device), speed, timeout=5)
    except:
        return False
    return True

# Reads byte from the serial port
def rx():
    return ord(ser.read()[0])

# Writes byte to the serial port
def tx(byte):
    ser.write(chr(byte))

# Sends and receives the startup sequence to the MCU
def synchronizeWithMcu():
    # Send startup sequence
    tx(0x1)
    tx(0x2)
    tx(0x3)

    # Read startup sequence
    try:
        if (rx() != 0x1):
            # The tx buffer can sometimes contain gargabe,
            # so just in case lets also read one more byte.
            if (rx() != 0x1):
                return False
        if (rx() != 0x2):
            return False
        if (rx() != 0x3):
            return False
    except:
        return False

    return True



# Function to calculate checksums
def crc(crc, data):
    lo8 = crc & 0x00FF
    hi8 = (crc >> 8) & 0x00FF
    data ^= lo8
    data ^= data << 4
    data &= 0xFF

    return (((data << 8) | hi8 ) ^ (data >> 4) ^ (data << 3))

# Writes the program image to the MCU
def write(data):
    length = len(data)
    total_length = length   # For progress bar
    next_tick = 100         # For progress bar
    start_time = time.time()
    byte = 0

    print "Uploading program to MCU"
    print "[0%        25%         50%         75%         100%]\r ",
    while length > 0:
        # Sends over serial to the mote
        # First wait for the MCU to signal that it is ready to receive
        if (rx() == SEND_MORE_BYTE):
            if (length <= REMOTE_BUF_SIZE):
                bytes = length
            else:
                bytes = REMOTE_BUF_SIZE;
            while True:
                crc_sum = 0
                for i in range(bytes):
                    tx(data[byte])
                    crc_sum = crc(crc_sum, data[byte])
                    byte += 1
                    # Progress bar
                    if (((total_length-1-byte) * 100) / total_length) < next_tick:
                        next_tick = next_tick - 2
                        sys.stdout.write('-')
                        sys.stdout.flush()
                # If there was not enough data left to fill the MCUs buffer
                # fill the rest of it with zeros.
                if (bytes < REMOTE_BUF_SIZE):
                    for i in range(REMOTE_BUF_SIZE - bytes):
                        tx(0)
                        crc_sum = crc(crc_sum, 0)
                # Send the crc
                tx((crc_sum>>8) & 0xFF)
                tx(crc_sum & 0xFF)
                # Wait for the MCU to signal that the bytes were correct
                # else resend.
                if (rx() == SEND_OK_BYTE):
                    break
                else:
                    byte -= bytes
        else:
            print "Unexpected byte from MCU"
            return False
        length -= bytes

    print '\r' + ' ' * 52,
    elasped_time = time.time() - start_time
    print "\r%s bytes in %.2f seconds (%.4f bytes/s)" % (total_length, elasped_time, int(total_length) / (elasped_time))

    return True

# Injects the ihex file specified by 'ihex' into the MCU connected at 'device'
def inject(ihex, device):
    # Checks for valid file path
    try:
        os.stat(ihex)         # Checks whether the specified file is valid
    except:
        print "ERROR: Unable to open file \"%s\"." % ihex
        return False

    #  Create the binary image
    data = buildImage(ihex)

    #  Open serial port
    if openSerial(device, serial_speed) != True:
        print "Unable to open device %s." % device
        return False

    #  Sync with MCU
    if (synchronizeWithMcu() != True):
        print "Unable to syncronize with the MCU"
        ser.close()
        return False

    if len(data) > 0:
        if write(data):
            print "--------------------------------------------------"
            print "Done uploading"
            print "Press RESET on the programming board to start your"
            print "application."
            print "--------------------------------------------------"
            ser.close()
            return True;
        else:
            print "--------------------------------------------------"
            print "Upload failed"
            print "--------------------------------------------------"
            ser.close()
            return False;

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print "Usage: %s <source> <ihex>" % sys.argv[0]
        print "  <source> is the com port the MCU is connected to."
        print "    On linux it is usually something like '/dev/tty*'"
        print "    and on windows it is '0 = COM1, 1 = COM2, etc'."
        print "  <ihex> is the application program in ihex format."
    else:
        inject(sys.argv[2], sys.argv[1])
